<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maden Evrimi: Derinliklerin MirasÄ±</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, updateDoc, onSnapshot, collection, query, getDocs, orderBy, limit } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Firebase Configuration (Provided by the user)
        const firebaseConfig = {
            apiKey: "AIzaSyDl8RZrHo_YewldAJlO4fXGaVLLUFcFY4I",
            authDomain: "emonun-oyunu.firebaseapp.com",
            projectId: "emonun-oyunu",
            storageBucket: "emonun-oyunu.firebasestorage.app",
            messagingSenderId: "257936730392",
            appId: "1:257936730392:web:a52465227e007d5834566d",
            measurementId: "G-645Q6903RR"
        };
        const appId = firebaseConfig.appId; // Use appId from the provided config
        const initialAuthToken = null; // No initial auth token provided by user, keep null

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Export Firebase instances to be used in the global scope (for the main script)
        window.firebaseApp = app;
        window.firebaseAuth = auth;
        window.firebaseDb = db;
        window.firebaseAppId = appId;
        window.firebaseInitialAuthToken = initialAuthToken;
        window.onAuthStateChanged = onAuthStateChanged; // Export the function itself
        window.signInWithCustomToken = signInWithCustomToken;
        window.signInAnonymously = signInAnonymously;
        window.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
        window.signInWithEmailAndPassword = signInWithEmailAndPassword;
        window.signOut = signOut;
        window.doc = doc;
        window.getDoc = getDoc;
        window.setDoc = setDoc;
        window.updateDoc = updateDoc;
        window.onSnapshot = onSnapshot;
        window.collection = collection;
        window.query = query;
        window.orderBy = orderBy;
        window.limit = limit;
        window.getDocs = getDocs; // Export getDocs for prize awarding
    </script>
    <style>
        /* General body styles */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark background */
            color: #e2e8f0; /* Light text */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 1rem;
            box-sizing: border-box;
        }
        /* Main container styles */
        .container {
            background-color: #2d3748; /* Slightly lighter dark background for container */
            border-radius: 1rem;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.3);
            max-width: 90%;
            width: 500px;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            border: 1px solid #4a5568;
        }
        /* Primary button styles (Mine Stone) */
        .btn-primary {
            background: linear-gradient(145deg, #4299e1, #3182ce); /* Blue gradient */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
        }
        .btn-primary:hover {
            background: linear-gradient(145deg, #3182ce, #2b6cb0);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
        }
        /* Upgrade button styles */
        .btn-upgrade {
            background-color: #48bb78; /* Green */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
        }
        .btn-upgrade:hover {
            background-color: #38a169;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
        }
        .btn-upgrade:disabled {
            background-color: #a0aec0; /* Gray for disabled */
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        /* Section title styles */
        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #90cdf4; /* Light blue */
            margin-bottom: 1rem;
            text-align: center;
        }
        /* Resource display area styles */
        .resource-display {
            background-color: #4a5568;
            padding: 1rem;
            border-radius: 0.75rem;
            text-align: center;
            font-size: 1.25rem;
            font-weight: 600;
            color: #cbd5e0;
        }
        /* Mining area styles */
        .mining-area {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
        }
        /* Upgrade list styles */
        .upgrade-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        /* Individual upgrade item styles */
        .upgrade-item {
            background-color: #4a5568;
            padding: 1rem;
            border-radius: 0.75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
        }
        /* Upgrade information text styles */
        .upgrade-info {
            flex-grow: 1;
        }
        .upgrade-info h3 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #90cdf4;
        }
        .upgrade-info p {
            font-size: 0.9rem;
            color: #cbd5e0;
        }

        /* Admin Menu Specific Styles */
        .admin-menu {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #2d3748;
            border: 2px solid #4299e1;
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 15px 25px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: none; /* Hidden by default */
            flex-direction: column;
            gap: 1rem;
            max-width: 90%;
            width: 400px;
        }
        .admin-menu-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: #90cdf4;
            text-align: center;
            margin-bottom: 1rem;
        }
        .admin-btn {
            background: linear-gradient(145deg, #ed8936, #dd6b20); /* Orange gradient */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
            width: 100%;
        }
        .admin-btn:hover {
            background: linear-gradient(145deg, #dd6b20, #c05621);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
        }

        /* Auth and Leaderboard Specific Styles */
        .auth-section, .leaderboard-section {
            background-color: #2d3748;
            padding: 1.5rem;
            border-radius: 1rem;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            gap: 1rem;
            border: 1px solid #4a5568;
        }
        .auth-section input {
            background-color: #4a5568;
            border: 1px solid #636b77;
            padding: 0.75rem;
            border-radius: 0.5rem;
            color: #e2e8f0;
        }
        .auth-section button {
            background: linear-gradient(145deg, #667eea, #5a67d8); /* Purple gradient */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
        }
        .auth-section button:hover {
            background: linear-gradient(145deg, #5a67d8, #4c51bf);
            transform: translateY(-2px);
        }
        .leaderboard-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .leaderboard-item {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
            border-bottom: 1px solid #4a5568;
        }
        .leaderboard-item:last-child {
            border-bottom: none;
        }
        .leaderboard-item.current-user {
            background-color: #4a5568;
            padding: 0.5rem;
            border-radius: 0.5rem;
            font-weight: 700;
            color: #a7f3d0; /* Light green for current user */
        }
        .prize-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #2d3748;
            border: 2px solid #a7f3d0;
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 15px 25px rgba(0, 0, 0, 0.5);
            z-index: 1001;
            display: none;
            flex-direction: column;
            gap: 1rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        .prize-modal-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: #a7f3d0;
        }
        .prize-modal-content {
            font-size: 1.1rem;
            color: #cbd5e0;
        }
        .prize-modal button {
            background: linear-gradient(145deg, #a7f3d0, #6ee7b7); /* Light green gradient */
            color: #1a202c;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
        }
        .prize-modal button:hover {
            background: linear-gradient(145deg, #6ee7b7, #34d399);
            transform: translateY(-2px);
        }
        .error-message {
            color: #fc8181; /* Red */
            font-size: 0.9rem;
            margin-top: 0.5rem;
            text-align: center;
        }
        /* Guest message style */
        .guest-message {
            background-color: #4a5568;
            padding: 0.75rem;
            border-radius: 0.5rem;
            text-align: center;
            font-size: 0.9rem;
            color: #ecc94b; /* Yellow */
            margin-top: 1rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="section-title">Maden Evrimi: Derinliklerin MirasÄ±</h1>

        <!-- Authentication Section -->
        <div id="authSection" class="auth-section">
            <h2 class="section-title">GiriÅ Yap / KayÄ±t Ol</h2>
            <input type="text" id="authUsername" placeholder="KullanÄ±cÄ± AdÄ±" class="w-full">
            <input type="email" id="authEmail" placeholder="E-posta" class="w-full">
            <input type="password" id="authPassword" placeholder="Åifre" class="w-full">
            <p id="authError" class="error-message"></p>
            <div class="flex gap-2">
                <button id="loginButton" class="flex-1">GiriÅ Yap</button>
                <button id="registerButton" class="flex-1">KayÄ±t Ol</button>
            </div>
            <button id="playAsGuestButton" class="btn-primary mt-2">Misafir Olarak Oyna</button>
            <button id="logoutButton" class="btn-primary mt-2" style="display: none;">ÃÄ±kÄ±Å Yap (<span id="loggedInUserName"></span>)</button>
            <p class="text-sm text-center text-gray-400 mt-2">
                KullanÄ±cÄ± ID'niz: <span id="currentUserId">YÃ¼kleniyor...</span>
            </p>
            <p id="guestMessageDisplay" class="guest-message" style="display: none;">
                Misafir olarak oynuyorsunuz. Skorunuz liderlik tablosuna kaydedilmeyecektir.
            </p>
        </div>

        <!-- Main Game Section (Hidden until logged in) -->
        <div id="gameSection" style="display: none;">
            <!-- Resource Display -->
            <div class="resource-display">
                <p>Toplam TaÅ: <span id="stoneCount">0</span></p>
                <p>Saniyede KazanÃ§: <span id="idleMiningRate">0</span></p>
            </div>

            <!-- Mining Area -->
            <div class="mining-area">
                <button id="mineButton" class="btn-primary w-full">TaÅ Kaz!</button>
            </div>

            <!-- Upgrades Section -->
            <div class="section-title mt-4">YÃ¼kseltmeler</div>
            <div class="upgrade-list" id="upgradeList">
                <!-- Upgrades will be dynamically added here -->
            </div>

            <!-- Leaderboard Section -->
            <div class="section-title mt-4">Liderlik Tablosu (Bu Hafta)</div>
            <div class="leaderboard-section">
                <ul id="leaderboardList" class="leaderboard-list">
                    <!-- Leaderboard items will be dynamically added here -->
                    <li class="text-center text-gray-500">YÃ¼kleniyor...</li>
                </ul>
                <p class="text-sm text-center text-gray-400 mt-2">
                    Liderlik tablosu her Pazartesi 00:00'da sÄ±fÄ±rlanÄ±r.
                </p>
            </div>
        </div>
    </div>

    <!-- Admin Menu -->
    <div id="adminMenu" class="admin-menu">
        <h2 class="admin-menu-title">Admin MenÃ¼sÃ¼</h2>
        <input type="number" id="adminStoneAmountInput" placeholder="Eklenecek TaÅ MiktarÄ±" class="w-full p-2 rounded-md bg-gray-700 text-white border border-gray-600">
        <button id="adminAddStone" class="admin-btn">TaÅ Ekle</button>
        <button id="adminPickaxeBoost" class="admin-btn">Kazma Seviyesini +10 ArtÄ±r</button>
        <button id="adminCloseMenu" class="admin-btn">Kapat</button>
    </div>

    <!-- Prize Modal -->
    <div id="prizeModal" class="prize-modal">
        <h2 class="prize-modal-title">Tebrikler!</h2>
        <p id="prizeModalContent" class="prize-modal-content">ÃdÃ¼lÃ¼nÃ¼zÃ¼ aldÄ±nÄ±z!</p>
        <button id="prizeModalCloseButton">Tamam</button>
    </div>

    <script>
        // Firebase instances will be available globally after the module script runs
        let auth, db, appId, initialAuthToken;
        let currentUserId = null;
        let currentUserEmail = null;
        let currentUserName = null;
        let isAuthReady = false;

        // Game state variables
        let stone = 0;
        let manualMiningPower = 1;
        let idleMiningRate = 0;
        let autoMinerCount = 0;
        let pickaxeLevel = 1;
        let totalStoneMined = 0;

        // Upgrade definitions
        const upgrades = [
            {
                id: 'autoMiner',
                name: 'Otomatik Madenci',
                description: 'Saniyede 1 taÅ kazanan bir madenci ekler.',
                baseCost: 5, // Made easier
                costMultiplier: 1.15, // Made easier
                level: 0,
                effect: (levels) => {
                    idleMiningRate += 1 * levels;
                    autoMinerCount += 1 * levels;
                }
            },
            {
                id: 'pickaxeUpgrade',
                name: 'Kazma YÃ¼kseltmesi',
                description: 'Manuel kazma gÃ¼cÃ¼nÃ¼ artÄ±rÄ±r.',
                baseCost: 10, // Made easier
                costMultiplier: 1.25, // Made easier
                level: 0,
                effect: (levels) => {
                    manualMiningPower += 1 * levels;
                    pickaxeLevel += 1 * levels;
                }
            }
        ];

        // Get DOM elements
        const stoneCountDisplay = document.getElementById('stoneCount');
        const idleMiningRateDisplay = document.getElementById('idleMiningRate');
        const mineButton = document.getElementById('mineButton');
        const upgradeList = document.getElementById('upgradeList');
        const adminMenu = document.getElementById('adminMenu');
        const adminAddStoneButton = document.getElementById('adminAddStone');
        const adminPickaxeBoostButton = document.getElementById('adminPickaxeBoost');
        const adminCloseMenuButton = document.getElementById('adminCloseMenu');

        // Auth elements
        const authSection = document.getElementById('authSection');
        const gameSection = document.getElementById('gameSection');
        const authUsernameInput = document.getElementById('authUsername');
        const authEmailInput = document.getElementById('authEmail'); // Corrected typo
        const authPasswordInput = document.getElementById('authPassword');
        const loginButton = document.getElementById('loginButton');
        const registerButton = document.getElementById('registerButton');
        const playAsGuestButton = document.getElementById('playAsGuestButton');
        const logoutButton = document.getElementById('logoutButton');
        const loggedInUserNameDisplay = document.getElementById('loggedInUserName');
        const authErrorDisplay = document.getElementById('authError');
        const currentUserIdDisplay = document.getElementById('currentUserId');
        const guestMessageDisplay = document.getElementById('guestMessageDisplay');

        // Leaderboard elements
        const leaderboardList = document.getElementById('leaderboardList');

        // Prize Modal elements
        const prizeModal = document.getElementById('prizeModal');
        const prizeModalContent = document.getElementById('prizeModalContent');
        const prizeModalCloseButton = document.getElementById('prizeModalCloseButton');

        // Admin menu specific elements
        const adminStoneAmountInput = document.getElementById('adminStoneAmountInput');

        // --- Utility Functions ---

        // Function to calculate the current week ID (YYYY-WW)
        function getCurrentWeekId() {
            const now = new Date();
            const year = now.getFullYear();
            const startOfYear = new Date(year, 0, 1);
            const diff = now.getTime() - startOfYear.getTime();
            const oneDay = 1000 * 60 * 60 * 24;
            const dayOfYear = Math.floor(diff / oneDay);
            const week = Math.ceil((dayOfYear + startOfYear.getDay() + 1) / 7);
            return `${year}-${String(week).padStart(2, '0')}`;
        }

        // Function to calculate the previous week ID
        function getPreviousWeekId() {
            const now = new Date();
            now.setDate(now.getDate() - 7);
            const year = now.getFullYear();
            const startOfYear = new Date(year, 0, 1);
            const diff = now.getTime() - startOfYear.getTime();
            const oneDay = 1000 * 60 * 60 * 24;
            const dayOfYear = Math.floor(diff / oneDay);
            const week = Math.ceil((dayOfYear + startOfYear.getDay() + 1) / 7);
            return `${year}-${String(week).padStart(2, '0')}`;
        }

        // --- Game State Management (Local & Firestore) ---

        // Function to update the UI
        function updateUI() {
            stoneCountDisplay.textContent = Math.floor(stone);
            idleMiningRateDisplay.textContent = idleMiningRate;

            // Update upgrade buttons
            upgrades.forEach(upgrade => {
                const upgradeButton = document.getElementById(`${upgrade.id}Button`);
                const upgradeCostDisplay = document.getElementById(`${upgrade.id}Cost`);
                const upgradeLevelDisplay = document.getElementById(`${upgrade.id}Level`);

                if (upgradeButton && upgradeCostDisplay && upgradeLevelDisplay) {
                    let nextCost = 0;
                    for (let i = 0; i < 5; i++) {
                        nextCost += Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.level + i));
                    }
                    upgradeCostDisplay.textContent = nextCost;
                    upgradeLevelDisplay.textContent = upgrade.level;
                    upgradeButton.disabled = stone < nextCost;
                }
            });
        }

        // Save game state to Firestore
        async function saveGameState() {
            if (!currentUserId || !db) {
                console.log("KullanÄ±cÄ± kimliÄi veya Firestore hazÄ±r deÄil, oyun durumu kaydedilemiyor.");
                return;
            }
            try {
                const userDocRef = window.doc(db, `artifacts/${appId}/users/${currentUserId}/gameData/current`);
                const gameState = {
                    stone: stone,
                    manualMiningPower: manualMiningPower,
                    idleMiningRate: idleMiningRate,
                    autoMinerCount: autoMinerCount,
                    pickaxeLevel: pickaxeLevel,
                    totalStoneMined: totalStoneMined,
                    upgrades: upgrades.map(u => ({ id: u.id, level: u.level }))
                };
                await window.setDoc(userDocRef, gameState, { merge: true });
                // console.log("Oyun durumu kaydedildi.");
            } catch (error) {
                console.error("Oyun durumu kaydedilirken hata oluÅtu:", error);
            }
        }

        // Load game state from Firestore
        async function loadGameState() {
            if (!currentUserId || !db) {
                console.log("KullanÄ±cÄ± kimliÄi veya Firestore hazÄ±r deÄil, oyun durumu yÃ¼klenemiyor.");
                return;
            }
            try {
                const userDocRef = window.doc(db, `artifacts/${appId}/users/${currentUserId}/gameData/current`);
                const docSnap = await window.getDoc(userDocRef);

                // Reset game state to default before loading to ensure clean application of effects
                stone = 0;
                manualMiningPower = 1;
                idleMiningRate = 0;
                autoMinerCount = 0;
                pickaxeLevel = 1;
                totalStoneMined = 0;
                upgrades.forEach(u => u.level = 0); // Reset upgrade levels

                if (docSnap.exists()) {
                    const data = docSnap.data();
                    stone = data.stone || 0;
                    manualMiningPower = data.manualMiningPower || 1;
                    idleMiningRate = data.idleMiningRate || 0;
                    autoMinerCount = data.autoMinerCount || 0;
                    pickaxeLevel = data.pickaxeLevel || 1;
                    totalStoneMined = data.totalStoneMined || 0;

                    // Apply upgrade levels and their effects
                    if (data.upgrades) {
                        data.upgrades.forEach(savedUpgrade => {
                            const localUpgrade = upgrades.find(u => u.id === savedUpgrade.id);
                            if (localUpgrade) {
                                const levelsToApply = savedUpgrade.level;
                                localUpgrade.level = savedUpgrade.level;
                                localUpgrade.effect(levelsToApply);
                            }
                        });
                    }
                    console.log("Oyun durumu yÃ¼klendi.");
                } else {
                    console.log("KayÄ±tlÄ± oyun durumu bulunamadÄ±, yeni oyun baÅlatÄ±lÄ±yor.");
                    saveGameState();
                }
                updateUI();
            } catch (error) {
                console.error("Oyun durumu yÃ¼klenirken hata oluÅtu:", error);
            }
        }

        // Update leaderboard score in Firestore
        async function updateLeaderboardScore() {
            // Only update if Firebase is ready, a user is logged in (not anonymous), and username is available
            if (!currentUserId || !db || !currentUserName || (auth.currentUser && auth.currentUser.isAnonymous)) {
                console.log("Misafir kullanÄ±cÄ±, liderlik tablosu gÃ¼ncellenmiyor.");
                return;
            }
            try {
                const weekId = getCurrentWeekId();
                const userLeaderboardDocRef = window.doc(db, `artifacts/${appId}/public/data/leaderboard/${weekId}/scores/${currentUserId}`);
                await window.setDoc(userLeaderboardDocRef, {
                    userId: currentUserId,
                    username: currentUserName,
                    score: totalStoneMined,
                    lastUpdated: new Date()
                }, { merge: true });
                // console.log("Liderlik tablosu gÃ¼ncellendi.");
            } catch (error) {
                console.error("Liderlik tablosu gÃ¼ncellenirken hata oluÅtu:", error);
            }
        }

        // Fetch and display leaderboard
        function fetchLeaderboard() {
            if (!db) return;
            const weekId = getCurrentWeekId();
            const leaderboardCollectionRef = window.collection(db, `artifacts/${appId}/public/data/leaderboard/${weekId}/scores`);
            const q = window.query(leaderboardCollectionRef);

            window.onSnapshot(q, (snapshot) => {
                let leaderboardData = [];
                snapshot.forEach((doc) => {
                    leaderboardData.push(doc.data());
                });

                leaderboardData.sort((a, b) => b.score - a.score);

                leaderboardList.innerHTML = '';

                if (leaderboardData.length === 0) {
                    leaderboardList.innerHTML = '<li class="text-center text-gray-500">Bu hafta henÃ¼z skor yok. Ä°lk sen ol!</li>';
                    return;
                }

                leaderboardData.slice(0, 10).forEach((entry, index) => {
                    const listItem = document.createElement('li');
                    listItem.className = `leaderboard-item ${entry.userId === currentUserId ? 'current-user' : ''}`;
                    listItem.innerHTML = `
                        <span>${index + 1}. ${entry.username}</span>
                        <span>${Math.floor(entry.score)} TaÅ</span>
                    `;
                    leaderboardList.appendChild(listItem);
                });
            }, (error) => {
                console.error("Liderlik tablosu dinlenirken hata oluÅtu:", error);
                leaderboardList.innerHTML = '<li class="text-center text-red-500">Liderlik tablosu yÃ¼klenemedi.</li>';
            });
        }

        // Award prizes based on previous week's leaderboard
        async function awardPrizes() {
            // Only award prizes if Firebase is ready and a user is logged in (not anonymous)
            if (!currentUserId || !db || !currentUserName || (auth.currentUser && auth.currentUser.isAnonymous)) return;

            const previousWeekId = getPreviousWeekId();
            const userPrizeDocRef = window.doc(db, `artifacts/${appId}/users/${currentUserId}/prizes/${previousWeekId}`);
            const prizeDocSnap = await window.getDoc(userPrizeDocRef);

            if (prizeDocSnap.exists() && prizeDocSnap.data().claimed) {
                return;
            }

            try {
                const leaderboardScoresCollectionRef = window.collection(db, `artifacts/${appId}/public/data/leaderboard/${previousWeekId}/scores`);
                const querySnapshot = await window.getDocs(leaderboardScoresCollectionRef);
                let previousLeaderboard = [];
                querySnapshot.forEach(doc => {
                    previousLeaderboard.push(doc.data());
                });

                previousLeaderboard.sort((a, b) => b.score - a.score);

                let prizeAwarded = false;
                let prizeMessage = "";

                if (previousLeaderboard.length > 0 && previousLeaderboard[0].userId === currentUserId) {
                    stone += 10000;
                    upgrades[0].level += 5;
                    idleMiningRate += 5;
                    prizeMessage = "GeÃ§en hafta 1. oldunuz! 10.000 TaÅ ve 5 Otomatik Madenci kazandÄ±nÄ±z!";
                    prizeAwarded = true;
                } else if (previousLeaderboard.length > 1 && previousLeaderboard[1].userId === currentUserId) {
                    stone += 5000;
                    upgrades[0].level += 2;
                    idleMiningRate += 2;
                    prizeMessage = "GeÃ§en hafta 2. oldunuz! 5.000 TaÅ ve 2 Otomatik Madenci kazandÄ±nÄ±z!";
                    prizeAwarded = true;
                }

                if (prizeAwarded) {
                    await window.setDoc(userPrizeDocRef, { claimed: true, awardDate: new Date(), prize: prizeMessage });
                    updateUI();
                    saveGameState();
                    showPrizeModal(prizeMessage);
                }
            } catch (error) {
                console.error("ÃdÃ¼l verilirken hata oluÅtu:", error);
            }
        }

        function showPrizeModal(message) {
            prizeModalContent.textContent = message;
            prizeModal.style.display = 'flex';
        }

        prizeModalCloseButton.addEventListener('click', () => {
            prizeModal.style.display = 'none';
        });

        // --- Authentication Logic ---

        document.addEventListener('DOMContentLoaded', () => {
            if (typeof window.firebaseAuth === 'undefined') {
                console.error("Firebase Auth is not defined. Ensure Firebase SDK module script loads correctly.");
                authErrorDisplay.textContent = "Uygulama baÅlatÄ±lamadÄ±. LÃ¼tfen konsolu kontrol edin.";
                return;
            }

            window.onAuthStateChanged(window.firebaseAuth, async (user) => {
                auth = window.firebaseAuth;
                db = window.firebaseDb;
                appId = window.firebaseAppId;
                initialAuthToken = window.firebaseInitialAuthToken;
                isAuthReady = true;

                if (user) {
                    currentUserId = user.uid;
                    currentUserEmail = user.email;

                    const userProfileRef = window.doc(db, `artifacts/${appId}/users/${currentUserId}/profile/data`);
                    const profileSnap = await window.getDoc(userProfileRef);

                    if (profileSnap.exists() && profileSnap.data().username) {
                        currentUserName = profileSnap.data().username;
                    } else if (user.isAnonymous) {
                        currentUserName = "Anonim KullanÄ±cÄ±";
                    } else {
                        currentUserName = currentUserEmail ? currentUserEmail.split('@')[0] : "Anonim KullanÄ±cÄ±";
                        await window.setDoc(userProfileRef, { username: currentUserName }, { merge: true });
                    }

                    loggedInUserNameDisplay.textContent = currentUserName;
                    currentUserIdDisplay.textContent = currentUserId;

                    authSection.style.display = 'none';
                    gameSection.style.display = 'block';
                    logoutButton.style.display = user.isAnonymous ? 'none' : 'block';
                    loginButton.style.display = 'none';
                    registerButton.style.display = 'none';
                    playAsGuestButton.style.display = 'none';
                    authErrorDisplay.textContent = '';
                    guestMessageDisplay.style.display = user.isAnonymous ? 'block' : 'none'; // Show/hide guest message

                    await loadGameState();
                    fetchLeaderboard();
                    awardPrizes();
                } else {
                    // KullanÄ±cÄ± giriÅ yapmamÄ±Åsa, kimlik doÄrulama bÃ¶lÃ¼mÃ¼nÃ¼ gÃ¶ster
                    authSection.style.display = 'block';
                    gameSection.style.display = 'none';
                    logoutButton.style.display = 'none';
                    loginButton.style.display = 'block';
                    registerButton.style.display = 'block';
                    playAsGuestButton.style.display = 'block';
                    currentUserIdDisplay.textContent = 'YÃ¼kleniyor...';
                    loggedInUserNameDisplay.textContent = '';
                    guestMessageDisplay.style.display = 'none'; // Hide guest message when not logged in
                }
            });
        });

        playAsGuestButton.addEventListener('click', async () => {
            authErrorDisplay.textContent = '';
            try {
                await window.signInAnonymously(auth);
            } catch (error) {
                console.error("Anonim giriÅ yapÄ±lÄ±rken hata oluÅtu:", error);
                authErrorDisplay.textContent = "Misafir olarak giriÅ baÅarÄ±sÄ±z. LÃ¼tfen tekrar deneyin.";
            }
        });

        registerButton.addEventListener('click', async () => {
            const username = authUsernameInput.value.trim();
            const email = authEmailInput.value.trim();
            const password = authPasswordInput.value.trim();
            authErrorDisplay.textContent = '';

            if (!username || !email || !password) {
                authErrorDisplay.textContent = 'LÃ¼tfen tÃ¼m alanlarÄ± doldurun.';
                return;
            }
            if (password.length < 6) {
                authErrorDisplay.textContent = 'Åifre en az 6 karakter olmalÄ±dÄ±r.';
                return;
            }

            try {
                const userCredential = await window.createUserWithEmailAndPassword(auth, email, password);
                const user = userCredential.user;
                const userProfileRef = window.doc(db, `artifacts/${appId}/users/${user.uid}/profile/data`);
                await window.setDoc(userProfileRef, { username: username }, { merge: true });

                authErrorDisplay.textContent = 'KayÄ±t baÅarÄ±lÄ±! Otomatik giriÅ yapÄ±ldÄ±.';
            } catch (error) {
                console.error("KayÄ±t hatasÄ±:", error);
                authErrorDisplay.textContent = `KayÄ±t baÅarÄ±sÄ±z: ${error.message}`;
            }
        });

        loginButton.addEventListener('click', async () => {
            const email = authEmailInput.value.trim();
            const password = authPasswordInput.value.trim();
            authErrorDisplay.textContent = '';

            if (!email || !password) {
                authErrorDisplay.textContent = 'LÃ¼tfen e-posta ve Åifreyi girin.';
                return;
            }

            try {
                await window.signInWithEmailAndPassword(auth, email, password);
                authErrorDisplay.textContent = 'GiriÅ baÅarÄ±lÄ±!';
            } catch (error) {
                console.error("GiriÅ hatasÄ±:", error);
                authErrorDisplay.textContent = `GiriÅ baÅarÄ±sÄ±z: ${error.message}`;
            }
        });

        logoutButton.addEventListener('click', async () => {
            try {
                await saveGameState();
                await window.signOut(auth);
                
                // Reset game state to default
                stone = 0;
                manualMiningPower = 1;
                idleMiningRate = 0;
                autoMinerCount = 0;
                pickaxeLevel = 1;
                totalStoneMined = 0;
                upgrades.forEach(u => u.level = 0);
                
                updateUI();
                authSection.style.display = 'block';
                gameSection.style.display = 'none';
                logoutButton.style.display = 'none';
                loginButton.style.display = 'block';
                registerButton.style.display = 'block';
                playAsGuestButton.style.display = 'block';
                currentUserIdDisplay.textContent = 'YÃ¼kleniyor...';
                loggedInUserNameDisplay.textContent = '';
                authUsernameInput.value = '';
                authEmailInput.value = '';
                authPasswordInput.value = '';
                authErrorDisplay.textContent = '';
                leaderboardList.innerHTML = '<li class="text-center text-gray-500">YÃ¼kleniyor...</li>';
                guestMessageDisplay.style.display = 'none';
            } catch (error) {
                console.error("ÃÄ±kÄ±Å yapÄ±lÄ±rken hata oluÅtu:", error);
                authErrorDisplay.textContent = `ÃÄ±kÄ±Å baÅarÄ±sÄ±z: ${error.message}`;
            }
        });

        // --- Game Logic ---

        mineButton.addEventListener('click', () => {
            stone += manualMiningPower;
            totalStoneMined += manualMiningPower;
            updateUI();
            updateLeaderboardScore();
        });

        setInterval(() => {
            if (isAuthReady && currentUserId) {
                stone += idleMiningRate;
                totalStoneMined += idleMiningRate;
                updateUI();
                updateLeaderboardScore();
                saveGameState();
            }
        }, 1000);

        function buyUpgrade(upgradeId) {
            const upgrade = upgrades.find(u => u.id === upgradeId);
            if (!upgrade) return;

            let totalCostFor5Levels = 0;
            for (let i = 0; i < 5; i++) {
                totalCostFor5Levels += Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.level + i));
            }

            if (stone >= totalCostFor5Levels) {
                stone -= totalCostFor5Levels;
                upgrade.level += 5;
                upgrade.effect(5);
                updateUI();
                saveGameState();
            } else {
                console.log('Yeterli taÅ yok!');
            }
        }

        function initializeUpgrades() {
            upgradeList.innerHTML = '';
            upgrades.forEach(upgrade => {
                let initialCostFor5Levels = 0;
                for (let i = 0; i < 5; i++) {
                    initialCostFor5Levels += Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.level + i));
                }

                const upgradeItem = document.createElement('div');
                upgradeItem.className = 'upgrade-item';
                upgradeItem.innerHTML = `
                    <div class="upgrade-info">
                        <h3>${upgrade.name} (Seviye: <span id="${upgrade.id}Level">${upgrade.level}</span>)</h3>
                        <p>${upgrade.description}</p>
                    </div>
                    <button id="${upgrade.id}Button" class="btn-upgrade">
                        YÃ¼kselt (+5 Seviye) (<span id="${upgrade.id}Cost">${initialCostFor5Levels}</span> TaÅ)
                    </button>
                `;
                upgradeList.appendChild(upgradeItem);

                document.getElementById(`${upgrade.id}Button`).addEventListener('click', () => buyUpgrade(upgrade.id));
            });
            updateUI();
        }

        // --- Admin Menu Functions ---
        adminAddStoneButton.addEventListener('click', () => {
            const amountToAdd = parseInt(adminStoneAmountInput.value, 10);
            if (isNaN(amountToAdd) || amountToAdd <= 0) {
                authErrorDisplay.textContent = "GeÃ§ersiz taÅ miktarÄ±. Pozitif bir sayÄ± girin.";
                return;
            }
            authErrorDisplay.textContent = ''; // Clear error if valid

            stone += amountToAdd;
            totalStoneMined += amountToAdd;
            updateUI();
            saveGameState();
            updateLeaderboardScore();
        });

        adminPickaxeBoostButton.addEventListener('click', () => {
            manualMiningPower += 10;
            pickaxeLevel += 10;
            const pickaxeUpgrade = upgrades.find(u => u.id === 'pickaxeUpgrade');
            if (pickaxeUpgrade) {
                pickaxeUpgrade.level = pickaxeLevel;
            }
            updateUI();
            saveGameState();
        });

        adminCloseMenuButton.addEventListener('click', () => {
            adminMenu.style.display = 'none';
            authErrorDisplay.textContent = ''; // Clear error when closing admin menu
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'F6') {
                event.preventDefault();
                if (adminMenu.style.display === 'flex') {
                    adminMenu.style.display = 'none';
                    authErrorDisplay.textContent = ''; // Clear error when closing
                } else {
                    adminMenu.style.display = 'flex';
                }
            }
        });

        window.onload = function() {
            initializeUpgrades();
        };
    </script>
</body>
</html>
